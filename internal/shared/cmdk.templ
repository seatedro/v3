package shared

templ Cmdk() {
	<div id="cmd-palette" class="fixed inset-0 z-50 bg-[#282828] bg-opacity-50 items-start justify-center pt-[10vh] hidden">
		<div class="bg-[#3c3836] rounded-lg shadow-lg w-full max-w-2xl overflow-hidden border border-[#504945]">
			<div class="p-4 flex items-center">
				<div id="breadcrumb" class="text-[#928374] mr-2"></div>
				<input
					type="text"
					id="cmd-input"
					class="flex-grow bg-[#3c3836] text-[#ebdbb2] rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#b8bb26] placeholder-[#928374]"
					placeholder="type something..."
				/>
			</div>
			<div id="cmd-list" class="max-h-[50vh] overflow-y-auto">
				<!-- cmd items will be inserted here automatically -->
			</div>
			<div
				class="px-4 py-2 bg-[#3c3836] text-[#928374] text-sm flex justify-center items-center space-x-4 border-t border-[#504945]"
			>
				<span>
					<kbd class="px-2 py-1 bg-[#504945] text-[#ebdbb2] rounded">↑</kbd>
					<kbd class="px-2 py-1 bg-[#504945] text-[#ebdbb2] rounded">↓</kbd>
					<span class="ml-1">to navigate</span>
				</span>
				<span>
					<kbd class="px-2 py-1 bg-[#504945] text-[#ebdbb2] rounded">↵</kbd>
					<span class="ml-1">to confirm</span>
				</span>
			</div>
		</div>
	</div>
	<script>
	const cmdPalette = document.getElementById("cmd-palette");
	const cmdInput = document.getElementById("cmd-input");
	const cmdList = document.getElementById("cmd-list");
	const breadcrumb = document.getElementById("breadcrumb");

	const mainCmds = [
		{
			name: "home",
			shortcut: "h",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>`,
			action: () => {window.location.href = "/"},
		},
		{
			name: "blog",
			shortcut: "b",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-notebook-pen"><path d="M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4"/><path d="M2 6h4"/><path d="M2 10h4"/><path d="M2 14h4"/><path d="M2 18h4"/><path d="M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/></svg>`,
			action: () => {showBlogPosts()},
		},
		{
			name: "kino",
			shortcut: "k",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/></svg>`,
			action: () => {window.location.href = "/kino"},
		},
		{
			name: "log",
			shortcut: "l",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-clock"><path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><circle cx="8" cy="16" r="6"/><path d="M9.5 17.5 8 16.25V14"/></svg>`,
			action: () => {window.location.href = "/log"},
		},
		{
			name: "x/twtr",
			shortcut: "t",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"/></svg>`,
			action: () => {window.open("https://twitter.com/seatedro")},
		},
		{
			name: "github",
			shortcut: "g",
			logo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-github"><path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"/><path d="M9 18c-4.51 2-5-2-7-2"/></svg>`,
			action: () => {window.open("https://github.com/seatedro")},
		}
	];

	let currentCmds = mainCmds;
	let selectedIndex = -1;
	let filteredCmds = currentCmds;
	let isInBlog = false;
	let defaultBlogPosts = [];


	function toggleCmdPalette() {
		cmdPalette.classList.toggle("hidden");
		cmdPalette.classList.toggle("flex");
		if (!cmdPalette.classList.contains("hidden")) {
			resetToMainView();
		}
	}

	function resetToMainView() {
		cmdInput.focus();
		selectedIndex = -1;
		currentCmds = mainCmds;
		filteredCmds = currentCmds;
		isInBlog = false;
		renderCmdList(filteredCmds);
		updateBreadcrumb();
		cmdInput.value = "";
		cmdInput.placeholder = "type something...";
	}

	function renderCmdList(filteredCmds) {
		cmdList.innerHTML = filteredCmds.map((cmd, index) => `
			<div class="px-4 py-4 hover:bg-[#282828] cursor-pointer flex items-center" data-index="${index}">
				${cmd.logo ? `<span >${cmd.logo}</span>` : ""}
				<span class="ml-4">${cmd.name}</span>
			</div>
		`).join("");
	}

	function updateSelection() {
		const items = cmdList.querySelectorAll("div");
		items.forEach((item, index) => {
			if (index === selectedIndex) {
				item.classList.add("bg-[#282828]");
				item.scrollIntoView({block: "nearest"});
			} else {
				item.classList.remove("bg-[#282828]");
			}
		});
	}

	function moveSelection(direction) {
		const items = cmdList.querySelectorAll("div");
		if (items.length === 0) return;
		selectedIndex = (selectedIndex + direction + items.length) % items.length;
		updateSelection();
	}

	function executeCmd() {
		if (selectedIndex >= 0 && selectedIndex < filteredCmds.length) {
			const cmd = filteredCmds[selectedIndex];
			cmd.action();
		}
	}

	async function showBlogPosts() {
		try {

			const res = await fetch("/api/blog-posts?limit=3");
			if (!res.ok) {
				throw new Error("Failed to fetch blog posts");
			}
			blogPosts = await res.json();
			currentCmds = blogPosts.map(post => ({
				name: post.Title,
				shortcut: "",
				action: () => {window.location.href = `/blog/${post.Slug}`}
			}));
			filteredCmds = currentCmds.slice(0, 3);
			defaultBlogPosts = filteredCmds;
			isInBlog = true;
			renderCmdList(filteredCmds);
			selectedIndex = -1;
			cmdInput.value = "";
			cmdInput.placeholder = "search blog posts...";
			updateBreadcrumb();
		} catch (error) {
			console.error("Error fetching blog posts:", error);
		}
	}

	function updateBreadcrumb() {
		if (isInBlog) {
			breadcrumb.textContent = "blog /";
			breadcrumb.classList.remove("hidden");
		} else {
			breadcrumb.textContent = "";
			breadcrumb.classList.add("hidden");
		}
	}

	function goBack() {
		if (isInBlog) {
			resetToMainView();
		} else {
			toggleCmdPalette();
		}
	}

	async function searchBlogPosts(query) {
		try {
			const res = await fetch(`/api/blog-posts/search?q=${encodeURIComponent(query)}&limit=3`);
			if (!res.ok) {
				throw new Error("Failed to fetch blog posts");
			}
			const blogPosts = await res.json();
			return blogPosts.map(post => ({
				name: post.Title,
				shortcut: "",
				action: () => {window.location.href = `/blog/${post.Slug}`}
			}));
		} catch (error) {
			console.error("Error fetching blog posts:", error);
			return [];
		}
	}

	cmdInput.addEventListener("input", async function (e) {
		const inputValue = e.target.value.toLowerCase();
		if (isInBlog) {
			if (inputValue === "") {
				filteredCmds = defaultBlogPosts;
			} else {
				filteredCmds = await searchBlogPosts(inputValue);
			}
		} else {
			filteredCmds = currentCmds.filter(cmd => cmd.name.toLowerCase().includes(inputValue));
		}
		renderCmdList(filteredCmds);
		selectedIndex = -1;
	});

	document.addEventListener("keydown", function (e) {
		if (e.key === "k" && (e.ctrlKey || e.metaKey)) {
			e.preventDefault();
			toggleCmdPalette();
		}
		if (!cmdPalette.classList.contains("hidden")) {
			switch (e.key) {
				case "ArrowDown":
					e.preventDefault();
					moveSelection(1);
					break;
				case "ArrowUp":
					e.preventDefault();
					moveSelection(-1);
					break;
				case "n":
					if (e.ctrlKey) {
						e.preventDefault();
						moveSelection(1);
					}
					break;
				case "p":
					if (e.ctrlKey) {
						e.preventDefault();
						moveSelection(-1);
					}
					break;
				case "Enter":
					e.preventDefault();
					executeCmd();
					break;
				case "Escape":
					e.preventDefault();
					goBack();
					break;

			}
		}
	});

	cmdPalette.addEventListener("click", function (e) {
		if (e.target === cmdPalette) {
			toggleCmdPalette();
		}
	});

	cmdList.addEventListener("click", function (e) {
		const clickedItem = e.target.closest("div[data-index]");
		if (clickedItem) {
			selectedIndex = parseInt(clickedItem.dataset.index);
			executeCmd();
		}
	});

	renderCmdList(filteredCmds);
</script>
}
